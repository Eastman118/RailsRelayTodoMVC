# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  testInt: Int
  viewer: User
}

type TodoItem implements Node {
  completed: Boolean!
  id: ID!
  name: String!
  todoList: TodoList!
}

# The connection type for TodoItem.
type TodoItemConnection {
  # A list of edges.
  edges: [TodoItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type TodoItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TodoItem
}

type TodoList implements Node {
  id: ID!
  name: String!
  todoItems(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): TodoItemConnection
  user: User!
}

type User implements Node {
  id: ID!
  name: String!
  todoList: TodoList
}