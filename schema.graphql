# Autogenerated input type of AddTodoItem
input AddTodoItemInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  completed: Boolean
  name: String!
  todoListID: ID!
}

# Autogenerated return type of AddTodoItem
type AddTodoItemPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  todoItem: TodoItem!
  todoList: TodoList!
  todoListTodoItemsConnectionEdge: TodoItemEdge!
}

# Autogenerated input type of ClearCompletedTodoItems
input ClearCompletedTodoItemsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  todoListID: ID!
}

# Autogenerated return type of ClearCompletedTodoItems
type ClearCompletedTodoItemsPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  removedTodoItems: [TodoItem]!
  todoList: TodoList!
}

# Autogenerated input type of MarkAllTodoItems
input MarkAllTodoItemsInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  completed: Boolean!
  todoListID: ID!
}

# Autogenerated return type of MarkAllTodoItems
type MarkAllTodoItemsPayload {
  changedTodoItems: [TodoItem]!

  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  todoList: TodoList!
}

type Mutation {
  addTodoItem(input: AddTodoItemInput!): AddTodoItemPayload
  clearCompletedTodoItems(input: ClearCompletedTodoItemsInput!): ClearCompletedTodoItemsPayload
  markAllTodoItems(input: MarkAllTodoItemsInput!): MarkAllTodoItemsPayload
  removeTodoItem(input: RemoveTodoItemInput!): RemoveTodoItemPayload
  updateTodoItem(input: UpdateTodoItemInput!): UpdateTodoItemPayload
}

# An object with an ID.
interface Node {
  # ID of the object.
  id: ID!
}

# Information about pagination in a connection.
type PageInfo {
  # When paginating forwards, the cursor to continue.
  endCursor: String

  # When paginating forwards, are there more items?
  hasNextPage: Boolean!

  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!

  # When paginating backwards, the cursor to continue.
  startCursor: String
}

type Query {
  # Fetches an object given its ID.
  node(
    # ID of the object.
    id: ID!
  ): Node
  testInt: Int
  viewer: User
}

# Autogenerated input type of RemoveTodoItem
input RemoveTodoItemInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  todoItemID: ID!
}

# Autogenerated return type of RemoveTodoItem
type RemoveTodoItemPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  removedTodoItem: TodoItem!
  todoList: TodoList!
}

type TodoItem implements Node {
  completed: Boolean!
  id: ID!
  name: String!
  todoList: TodoList!
}

# The connection type for TodoItem.
type TodoItemConnection {
  # A list of edges.
  edges: [TodoItemEdge]

  # Information to aid in pagination.
  pageInfo: PageInfo!
}

# An edge in a connection.
type TodoItemEdge {
  # A cursor for use in pagination.
  cursor: String!

  # The item at the end of the edge.
  node: TodoItem
}

type TodoList implements Node {
  activeTodoItemsCount: Int
  completedTodoItemsCount: Int
  id: ID!
  name: String!
  todoItems(
    # Returns the elements in the list that come after the specified global ID.
    after: String

    # Returns the elements in the list that come before the specified global ID.
    before: String
    filter: TodoListTodoItemsFilterEnum

    # Returns the first _n_ elements from the list.
    first: Int

    # Returns the last _n_ elements from the list.
    last: Int
  ): TodoItemConnection
  todoItemsCount: Int
  user: User!
}

enum TodoListTodoItemsFilterEnum {
  active
  all
  completed
}

# Autogenerated input type of UpdateTodoItem
input UpdateTodoItemInput {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  completed: Boolean
  name: String
  todoItemID: ID!
}

# Autogenerated return type of UpdateTodoItem
type UpdateTodoItemPayload {
  # A unique identifier for the client performing the mutation.
  clientMutationId: String
  todoItem: TodoItem!
  todoList: TodoList!
}

type User implements Node {
  id: ID!
  name: String!
  todoList: TodoList
}